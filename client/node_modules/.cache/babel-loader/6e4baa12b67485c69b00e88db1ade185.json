{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASMAE\\\\Desktop\\\\portfoliopro\\\\client\\\\src\\\\PortfolioContainer\\\\Home\\\\Header\\\\Header.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from '../../../Utilities/CommonUtils';\nimport ScrollService from '../../../Utilities/ScrollService';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Header.css';\nimport { BehaviorSubject } from 'rxjs';\nimport logo from \"../../../assets/Home/B-removebg-preview.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Header() {\n  _s();\n\n  const [selectedScreen, setSelectedScreen] = useState(0);\n  const [showHeaderOptions, setShowHeaderOptions] = useState(false);\n\n  const updateCurrentScreen = currentScreen => {\n    if (!currentScreen || !currentScreen.screenInView) return;\n    let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView);\n    if (screenIndex < 0) return;\n  };\n\n  let currentScreenSubscription = ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen);\n\n  const getHeaderOptions = () => {\n    return TOTAL_SCREENS.map((screen, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getHeaderOptionsClass(i),\n      onClick: () => switchScreen(i, screen),\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: screen.screen_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }, this)\n    }, screen.screen_name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this));\n  };\n\n  const getHeaderOptionsClass = index => {\n    let classes = \"header-option\";\n    if (index < TOTAL_SCREENS.length - 1) classes += \"header-option-separator\";\n    if (selectedScreen === index) classes += \"selected-header-option\";\n    return;\n  };\n\n  const switchScreen = (index, screen) => {\n    let screenComponent = document.getElementById(screen.screen_name);\n    if (!screenComponent) return;\n    screenComponent.scrollIntoView({\n      behavior: 'smooth'\n    });\n    setSelectedScreen(index);\n    setShowHeaderOptions(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-container\",\n      onClick: () => setShowHeaderOptions(!showHeaderOptions),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-parent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-hamburger\",\n          onClick: () => setShowHeaderOptions(!showHeaderOptions),\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            className: \"header-hamburger-bars\",\n            icon: faBars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            alt: \"logopng\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: showHeaderOptions ? \"header-option show-hamburger-options\" : \"header-option\",\n          children: getHeaderOptions()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Header, \"q2MbXurkb4Gbb5Hih7vqcPgrBdM=\");\n\n_c = Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["C:/Users/ASMAE/Desktop/portfoliopro/client/src/PortfolioContainer/Home/Header/Header.js"],"names":["React","useState","TOTAL_SCREENS","GET_SCREEN_INDEX","ScrollService","faBars","FontAwesomeIcon","BehaviorSubject","logo","Header","selectedScreen","setSelectedScreen","showHeaderOptions","setShowHeaderOptions","updateCurrentScreen","currentScreen","screenInView","screenIndex","currentScreenSubscription","currentScreenBroadCaster","subscribe","getHeaderOptions","map","screen","i","getHeaderOptionsClass","switchScreen","screen_name","index","classes","length","screenComponent","document","getElementById","scrollIntoView","behavior"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { TOTAL_SCREENS, GET_SCREEN_INDEX } from '../../../Utilities/CommonUtils'\r\nimport ScrollService from '../../../Utilities/ScrollService'\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport './Header.css'\r\nimport { BehaviorSubject } from 'rxjs'\r\nimport logo from \"../../../assets/Home/B-removebg-preview.png\";\r\n\r\nexport default function Header() {\r\n    const [selectedScreen, setSelectedScreen] = useState(0)\r\n    const [showHeaderOptions, setShowHeaderOptions] = useState(false)\r\n\r\n\r\n\r\n    const updateCurrentScreen = (currentScreen) => {\r\n        if (!currentScreen || !currentScreen.screenInView)\r\n            return;\r\n        let screenIndex = GET_SCREEN_INDEX(currentScreen.screenInView)\r\n        if (screenIndex < 0) \r\n            return\r\n    }\r\n    let currentScreenSubscription = ScrollService.currentScreenBroadCaster.subscribe(updateCurrentScreen)\r\n\r\n    const getHeaderOptions = () => {\r\n        return(\r\n            TOTAL_SCREENS.map((screen, i)=> (\r\n                <div key={screen.screen_name} className={getHeaderOptionsClass(i)}\r\n                    onClick={() => switchScreen(i, screen)}>\r\n                    <span>{screen.screen_name}</span>\r\n                </div>\r\n            )\r\n            )\r\n        )\r\n    }\r\n\r\n\r\n    const getHeaderOptionsClass = (index) => {\r\n        let classes = \"header-option\";\r\n        if (index < TOTAL_SCREENS.length - 1)\r\n            classes += \"header-option-separator\";\r\n        \r\n        if (selectedScreen === index)\r\n            classes += \"selected-header-option\";\r\n        return \r\n    \r\n    }\r\n    const switchScreen = (index, screen) => {\r\n        let screenComponent = document.getElementById(screen.screen_name);\r\n        if (!screenComponent)\r\n            return;\r\n        \r\n        screenComponent.scrollIntoView({ behavior: 'smooth' })\r\n        setSelectedScreen(index);\r\n        setShowHeaderOptions(false);\r\n    };\r\n\r\n  return (  \r\n    <div>\r\n          <div className='header-container' onClick={() => setShowHeaderOptions(!showHeaderOptions)}>\r\n              <div className='header-parent'>\r\n                  <div className='header-hamburger' onClick={() => setShowHeaderOptions(!showHeaderOptions)}>\r\n                      <FontAwesomeIcon className='header-hamburger-bars' icon={faBars}/>\r\n                  </div>\r\n                  <div className='header-logo'>\r\n                      <img src={logo}  alt='logopng'/>\r\n                  </div>\r\n                  <div className={showHeaderOptions\r\n                      ? \"header-option show-hamburger-options\"\r\n                      : \"header-option\"\r\n                  }>\r\n                      {getHeaderOptions()}\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          \r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}