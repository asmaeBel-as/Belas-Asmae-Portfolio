{"ast":null,"code":"import { TOTAL_SCREENS } from \"./CommonUtils\";\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            //BROADCAST FADE IN EFFECT\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            // BROADCAST SCREEN NAME\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    /* ADD SCROLL EVENT TO WINDOW */\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["C:/Users/ASMAE/Desktop/portfoliopro/client/src/Utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","scrollHandler","currentScreenBroadCaster"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,eAAe,MAAMC,aAAN,CAAmB;AAM9BC,EAAAA,WAAW,GAAG;AAAA,SAKbC,cALa,GAKI,MAAM;AACxB,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAtB;AACA,UAAI,CAACF,eAAL,EAAsB;AAEtBA,MAAAA,eAAe,CAACG,cAAhB,CAA+B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA/B;AACD,KAVe;;AAAA,SAWdC,YAXc,GAWC,MAAM;AACrB,UAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAI,CAACI,UAAL,EAAiB;AAEjBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA1B;AACD,KAhBe;;AAAA,SAiBfG,eAjBe,GAiBG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC7B,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACG,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACP,UAAIC,UAAU,GAAGJ,GAAG,CAACK,MAArB;AACI,UAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,UAAU,IAAI,CAAxE;AAEC,UAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAd,IAAmBE,UAAU,IAAIG,MAAM,CAACC,WAAhE;;AAGD,cAAQT,IAAR;AACF,aAAK,SAAL;AACE,iBAAOO,gBAAP;;AAEF,aAAK,UAAL;AACE,iBAAOG,iBAAP;;AAEF;AACE,iBAAO,KAAP;AARA;AAUL,KApCe;;AAAA,SAqCdC,+BArCc,GAqCqBC,KAAD,IAAW;AAC7C,UAAI,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAA1C,EAA6C;;AAEzC,WAAK,IAAIC,MAAT,IAAmB9B,aAAnB,EAAkC;AACpC,YAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAT,CAAwBuB,MAAM,CAACE,WAA/B,CAApB;AACA,YAAI,CAACD,aAAL,EAAoB;AACd,YAAIE,YAAY,GAAG,KAAKrB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;AACN,YAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;AAEO,YAAIE,YAAY,IAAIZ,gBAApB,EAAsC;AAC3C,cAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAhC,EAAiD;AAC/C;AACAhC,YAAAA,aAAa,CAACiC,mBAAd,CAAkCC,IAAlC,CAAuC;AACrCC,cAAAA,YAAY,EAAEP,MAAM,CAACE;AADgB,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACD;;AAEO,cAAIG,YAAJ,EAAkB;AACxB;AACA/B,YAAAA,aAAa,CAACoC,wBAAd,CAAuCF,IAAvC,CAA4C;AAC1CG,cAAAA,YAAY,EAAET,MAAM,CAACE;AADqB,aAA5C;AAGA;AACK;AACR;AACF;AACF,KAjEe;;AACd;AACAV,IAAAA,MAAM,CAACkB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKf,+BAAvC;AACD;;AAT+B;AAAbvB,a,CACVuC,a,GAAgB,IAAIvC,aAAJ,E;AADNA,a,CAEVwC,wB,GAA2B,IAAIzC,OAAJ,E;AAFjBC,a,CAGViC,mB,GAAuB,IAAIlC,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from \"./CommonUtils\";\r\nimport { Subject } from 'rxjs'\r\nexport default class ScrollService{\r\n    static scrollHandler = new ScrollService();\r\n    static currentScreenBroadCaster = new Subject();\r\n    static currentScreenFadeIn  = new Subject();\r\n\r\n\r\n    constructor() {\r\n    /* ADD SCROLL EVENT TO WINDOW */\r\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\r\n  }\r\n    \r\n     scrollToHireMe = () => {\r\n    let contactMeScreen = document.getElementById(\"ContactMe\");\r\n    if (!contactMeScreen) return;\r\n\r\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n    scrollToHome = () => {\r\n    let homeScreen = document.getElementById(\"Home\");\r\n    if (!homeScreen) return;\r\n\r\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n   isElementInView = (elem, type) => {\r\n        let rec = elem.getBoundingClientRect();\r\n           let elementTop = rec.top;\r\n    let elemBottom = rec.bottom;\r\n        let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\r\n\r\n         let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\r\n        \r\n\r\n        switch (type) {\r\n      case \"partial\":\r\n        return partiallyVisible;\r\n\r\n      case \"complete\":\r\n        return completelyVisible;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n    checkCurrentScreenUnderViewport = (event) => {\r\n    if (!event || Object.keys(event).length < 1) return;\r\n\r\n        for (let screen of TOTAL_SCREENS) {\r\n      let screenFromDOM = document.getElementById(screen.screen_name);\r\n      if (!screenFromDOM) continue;\r\n            let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\r\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\r\n\r\n             if (fullyVisible || partiallyVisible) {\r\n        if (partiallyVisible && !screen.alreadyRendered) {\r\n          //BROADCAST FADE IN EFFECT\r\n          ScrollService.currentScreenFadeIn.next({\r\n            fadeInScreen: screen.screen_name,\r\n          });\r\n          screen[\"alreadyRendered\"] = true;\r\n          break;\r\n        }\r\n\r\n                if (fullyVisible) {\r\n          // BROADCAST SCREEN NAME\r\n          ScrollService.currentScreenBroadcaster.next({\r\n            screenInView: screen.screen_name,\r\n          });\r\n          break;\r\n              }\r\n      }\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}