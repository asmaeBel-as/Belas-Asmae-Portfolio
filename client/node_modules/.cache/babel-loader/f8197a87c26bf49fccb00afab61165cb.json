{"ast":null,"code":"import { TOTAL_SCREENS } from \"./CommonUtils\";\nimport { Subject } from 'rxjs';\nexport default class ScrollService {\n  constructor() {\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelyVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewPort = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDom = document.getElementById(screen.screen_name);\n        if (!screenFromDom) continue;\n        let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen['alreadyRendered'] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadCaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    /* ADD SCROLL EVENT TO WINDOW */\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n\n}\nScrollService.scrollHandler = new ScrollService();\nScrollService.currentScreenBroadCaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["C:/Users/ASMAE/Desktop/portfoliopro/client/src/Utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","bottom","partiallyVisible","window","innerHeight","elemBottom","completelyVisible","checkCurrentScreenUnderViewPort","event","Object","keys","length","screen","screenFromDom","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadCaster","screenInView","addEventListener","checkCurrentScreenUnderViewport","scrollHandler"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,eAAe,MAAMC,aAAN,CAAmB;AAM9BC,EAAAA,WAAW,GAAG;AAAA,SAKbC,cALa,GAKI,MAAM;AACxB,UAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAtB;AACA,UAAI,CAACF,eAAL,EAAsB;AAEtBA,MAAAA,eAAe,CAACG,cAAhB,CAA+B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA/B;AACD,KAVe;;AAAA,SAWdC,YAXc,GAWC,MAAM;AACrB,UAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB;AACA,UAAI,CAACI,UAAL,EAAiB;AAEjBA,MAAAA,UAAU,CAACH,cAAX,CAA0B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA1B;AACD,KAhBe;;AAAA,SAiBfG,eAjBe,GAiBG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC7B,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACG,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACP,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AACI,UAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCC,UAAU,IAAI,CAAxE;AAEC,UAAIC,iBAAiB,GAAGR,UAAU,IAAI,CAAd,IAAmBO,UAAU,IAAIF,MAAM,CAACC,WAAhE;;AAGD,cAAQT,IAAR;AACI,aAAK,SAAL;AACI,iBAAOO,gBAAP;;AACJ,aAAK,UAAL;AAAiB,iBAAOI,iBAAP;;AACjB;AAAS,iBAAO,KAAP;AAJb;AAMH,KAhCa;;AAAA,SAiCdC,+BAjCc,GAiCqBC,KAAD,IAAW;AACzC,UAAI,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAA1C,EACI;;AACJ,WAAK,IAAIC,MAAT,IAAmB/B,aAAnB,EAAkC;AAC9B,YAAIgC,aAAa,GAAG1B,QAAQ,CAACC,cAAT,CAAwBwB,MAAM,CAACE,WAA/B,CAApB;AACA,YAAI,CAACD,aAAL,EACI;AAEJ,YAAIE,YAAY,GAAG,KAAKtB,eAAL,CAAqBoB,aAArB,EAAoC,UAApC,CAAnB;AACA,YAAIX,gBAAgB,GAAG,KAAKT,eAAL,CAAqBoB,aAArB,EAAoC,SAApC,CAAvB;;AAEA,YAAIE,YAAY,IAAIb,gBAApB,EAAsC;AAClC,cAAIA,gBAAgB,IAAI,CAACU,MAAM,CAACI,eAAhC,EAAiD;AAC7CjC,YAAAA,aAAa,CAACkC,mBAAd,CAAkCC,IAAlC,CAAuC;AACnCC,cAAAA,YAAY,EAAEP,MAAM,CAACE;AADc,aAAvC;AAGAF,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACH;;AACD,cAAIG,YAAJ,EAAkB;AACdhC,YAAAA,aAAa,CAACqC,wBAAd,CAAuCF,IAAvC,CAA4C;AACxCG,cAAAA,YAAY,EAAET,MAAM,CAACE;AADmB,aAA5C;AAGA;AACH;AACJ;AACJ;AACJ,KA5Da;;AACd;AACAX,IAAAA,MAAM,CAACmB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,+BAAvC;AACD;;AAT+B;AAAbxC,a,CACVyC,a,GAAgB,IAAIzC,aAAJ,E;AADNA,a,CAEVqC,wB,GAA2B,IAAItC,OAAJ,E;AAFjBC,a,CAGVkC,mB,GAAuB,IAAInC,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from \"./CommonUtils\";\r\nimport { Subject } from 'rxjs'\r\nexport default class ScrollService{\r\n    static scrollHandler = new ScrollService();\r\n    static currentScreenBroadCaster = new Subject();\r\n    static currentScreenFadeIn  = new Subject();\r\n\r\n\r\n    constructor() {\r\n    /* ADD SCROLL EVENT TO WINDOW */\r\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\r\n  }\r\n    \r\n     scrollToHireMe = () => {\r\n    let contactMeScreen = document.getElementById(\"ContactMe\");\r\n    if (!contactMeScreen) return;\r\n\r\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n    scrollToHome = () => {\r\n    let homeScreen = document.getElementById(\"Home\");\r\n    if (!homeScreen) return;\r\n\r\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n   isElementInView = (elem, type) => {\r\n        let rec = elem.getBoundingClientRect();\r\n           let elementTop = rec.top;\r\n    let elementBottom = rec.bottom;\r\n        let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\r\n\r\n         let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\r\n        \r\n\r\n        switch (type) {\r\n            case \"partial\":\r\n                return partiallyVisible;\r\n            case \"complete\": return completelyVisible;\r\n            default: return false\r\n        }\r\n    }\r\n    checkCurrentScreenUnderViewPort = (event) => {\r\n        if (!event || Object.keys(event).length < 1)\r\n            return;\r\n        for (let screen of TOTAL_SCREENS) {\r\n            let screenFromDom = document.getElementById(screen.screen_name);\r\n            if (!screenFromDom)\r\n                continue;\r\n            \r\n            let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\r\n            let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\r\n\r\n            if (fullyVisible || partiallyVisible) {\r\n                if (partiallyVisible && !screen.alreadyRendered) {\r\n                    ScrollService.currentScreenFadeIn.next({\r\n                        fadeInScreen: screen.screen_name\r\n                    });\r\n                    screen['alreadyRendered'] = true;\r\n                    break;\r\n                }\r\n                if (fullyVisible) {\r\n                    ScrollService.currentScreenBroadCaster.next({\r\n                        screenInView: screen.screen_name\r\n                    });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n        \r\n}"]},"metadata":{},"sourceType":"module"}